{"version":3,"sources":["webpack:///webpack/bootstrap 838cbddb281279f75524","webpack:///./lib/survival.js","webpack:///./lib/game.js","webpack:///./lib/player_cell.js","webpack:///./lib/moving_object.js","webpack:///./lib/util.js","webpack:///./lib/cell.js","webpack:///./lib/game_view.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA,IAAG;;AAEH,EAAC;;;;;;;AChDD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,oBAAmB,oBAAoB;AACvC,2BAA0B,YAAY;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,MAAK;AACL;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACnNA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;;ACrBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL,+BAA8B,EAAE,UAAU,EAAE,UAAU,EAAE;AACxD;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACrIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACRA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA,oBAAmB,iCAAiC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAoB,6BAA6B,EAAE;AACnD,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 838cbddb281279f75524\n **/","const Game = require(\"./game\");\nconst GameView = require(\"./game_view\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  const canvasEl = document.getElementsByTagName(\"canvas\")[0];\n  const buttonEl = document.getElementsByTagName(\"button\")[0];\n  const entryEl = document.getElementById(\"entry-screen\");\n  const gameOverEl = document.getElementById(\"game-over-container\");\n  const directionsDD = document.getElementById(\"directions-dropdown\");\n\n  canvasEl.width = Game.WIDTH;\n  canvasEl.height = Game.HEIGHT;\n  const ctx = canvasEl.getContext(\"2d\");\n  const game = new Game();\n\n  const hideEntryEl = () => {\n    if (entryEl.classList.contains(\"visible\")) {\n      entryEl.classList.remove(\"visible\");\n      entryEl.classList.add(\"hidden\");\n    }\n  };\n\n  const hideGameOverEl = () => {\n    if (gameOverEl.classList.contains(\"visible\")) {\n      gameOverEl.classList.remove(\"visible\");\n      gameOverEl.classList.add(\"hidden\");\n    }\n  };\n\n  document.addEventListener(\"keypress\", function(e) {\n    if (e.keyCode === 32 && game.inProgress === false) {\n      new GameView(game, ctx).start();\n      hideEntryEl();\n      hideGameOverEl();\n      canvasEl.classList.remove(\"opaque\");\n    }\n  });\n\n  buttonEl.addEventListener(\"mouseover\", function() {\n    directionsDD.classList.remove(\"hidden\");\n    directionsDD.classList.add(\"visible\");\n  });\n\n  buttonEl.addEventListener(\"mouseleave\", function() {\n    directionsDD.classList.remove(\"visible\");\n    directionsDD.classList.add(\"hidden\");\n  });\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/survival.js\n ** module id = 0\n ** module chunks = 0\n **/","const PlayerCell = require(\"./player_cell\");\nconst Cell = require(\"./cell\");\nconst Util = require(\"./util\");\n\nclass Game {\n  constructor() {\n    this.playerCells = [];\n    this.cells = [];\n    this.screenCenter = this.centerPosition();\n    this.inProgress = false;\n    this.paused = false;\n  }\n\n  add(object) {\n    if (object instanceof PlayerCell) {\n      this.playerCells.push(object);\n    } else if (object instanceof Cell) {\n      this.cells.push(object);\n    } else {\n      throw \"game.js - object not accounted for\";\n    }\n  }\n\n  addCells() {\n    let newCell;\n    for (let i = 0; i < Game.NUM_CELLS; i++) {\n      newCell = new Cell({ game: this});\n      this.add(newCell);\n    }\n  }\n\n  addPlayerCell() {\n    const playerCell = new PlayerCell({\n      game: this\n    });\n\n    this.add(playerCell);\n    return playerCell;\n  }\n\n  allObjects() {\n    return [].concat(this.playerCells, this.cells);\n  }\n\n  draw(ctx) {\n    ctx.clearRect(0, 0, Game.WIDTH, Game.HEIGHT);\n\n    this.allObjects().forEach(object => {\n      object.draw(ctx);\n    });\n\n  }\n\n  moveObjects(timeStep) {\n    this.allObjects().forEach(object => {\n      object.move(timeStep);\n    });\n  }\n\n  checkCollisions() {\n    this.allObjects().forEach((object1) => {\n      this.allObjects().forEach((object2) => {\n        if (object1.isCollidedWith(object2) && object1 !== object2) {\n          object1.collideWith(object2);\n        }\n      });\n    });\n  }\n\n  removeObject(object) {\n    if (object instanceof PlayerCell) {\n      this.playerCells.splice(this.playerCells.indexOf(object), 1);\n    } else if (object instanceof Cell) {\n      // if (object.radius !== 0) console.log(\"removing object of radius\", object.radius);\n      this.cells.splice(this.cells.indexOf(object), 1);\n    }\n  }\n\n  step(timeStep) {\n    this.adjustPlayerVelocity();\n    this.moveObjects(timeStep);\n    this.checkCollisions();\n    this.checkGameStatus();\n    // if (Math.floor(this.checkSystemMass()) !== Math.floor(this.totalMass)) {\n    //   console.log(\"New system mass: \", this.checkSystemMass());\n    // }\n  }\n\n  centerPosition() {\n    return [Game.WIDTH/2, Game.HEIGHT/2];\n  }\n\n  randomPosition(radius) {\n    let potentialPos;\n    let invalid = true;\n\n    while (invalid) {\n      potentialPos = [\n        Math.floor((Math.random() * Game.WIDTH) + 1),\n        Math.floor((Math.random() * Game.HEIGHT) + 1)\n      ];\n\n      if (this.isValidSpawnPos(potentialPos, radius)) {\n        invalid = false;\n        break;\n      }\n    }\n\n    return potentialPos;\n  }\n\n  isValidSpawnPos(pos, radius) {\n    let xLeft = pos[0] - radius;\n    let xRight = pos[0] + radius;\n    let yTop = pos[1] - radius;\n    let yBottom = pos[1] + radius;\n\n    if (xLeft < 0 || xRight > Game.WIDTH) {\n      return false;\n    } else if (yTop < 0 || yBottom > Game.HEIGHT) {\n      return false;\n    } else if (!this.farEnoughFromCenter(pos, radius)) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  farEnoughFromCenter(pos, radius) {\n    if (Util.dist(pos, this.screenCenter) < 100 + radius) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  redirectIfOutOfBounds(pos, vel, radius) {\n    let xLeft = pos[0] - radius;\n    let xRight = pos[0] + radius;\n    let yTop = pos[1] - radius;\n    let yBottom = pos[1] + radius;\n\n    if (xLeft < 0 && vel[0] < 0) {\n      return [-1*vel[0], vel[1]];\n    } else if (xRight > Game.WIDTH && vel[0] > 0) {\n      return [-1*vel[0], vel[1]];\n    } else if (yTop < 0 && vel[1] < 0) {\n      return [vel[0], -1*vel[1]];\n    } else if (yBottom > Game.HEIGHT && vel[1] > 0) {\n      return [vel[0], -1*vel[1]];\n    } else {\n      return vel;\n    }\n  }\n\n  gameOver() {\n    if (this.allObjects().length === 1 && this.playerCells.length === 1) {\n      this.inProgress = false;\n      return \"win\";\n    } else if (this.playerCells.length === 0) {\n      this.inProgress = false;\n      return \"loss\";\n    } else {\n      return \"incomplete\";\n    }\n  }\n\n  checkGameStatus() {\n    const canvasEl = document.getElementsByTagName(\"canvas\")[0];\n    const gameOverEl = document.getElementById(\"game-over-container\");\n    const gameOverTitle = document.getElementsByClassName(\"game-over title\")[0];\n    const gameOverDesc1 = document.getElementsByClassName(\"game-over desc line1\")[0];\n\n    if (this.gameOver() !== \"incomplete\") {\n      canvasEl.classList.add(\"opaque\");\n      gameOverEl.classList.remove(\"hidden\");\n      gameOverEl.classList.add(\"visible\");\n      if (this.gameOver() === \"win\") {\n        gameOverTitle.innerHTML = \"Dominant Lifeform\";\n        gameOverDesc1.innerHTML = \"You own this ecosystem\";\n      } else {\n        gameOverTitle.innerHTML = \"Absorbed\";\n        gameOverDesc1.innerHTML = \"Better luck next time\";\n      }\n    }\n  }\n\n  adjustPlayerVelocity() {\n    if (this.playerCells.length !== 0) {\n      let player = this.playerCells[0];\n      player.vel = [(1-Game.PLAYER_FRICTION)*player.vel[0],\n                    (1-Game.PLAYER_FRICTION)*player.vel[1] ];\n    }\n  }\n\n  checkSystemMass() {\n    let total = 0;\n    this.allObjects().forEach(object => {\n      total += Math.PI * Math.pow(object.radius, 2);\n    });\n    return total;\n  }\n\n}\n\nGame.BG_COLOR = \"#001f3f\";\nGame.WIDTH = window.innerWidth;\nGame.HEIGHT = window.innerHeight;\nGame.NUM_CELLS = 400;\nGame.PLAYER_FRICTION = 0.001;\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game.js\n ** module id = 1\n ** module chunks = 0\n **/","const MovingObject = require(\"./moving_object\");\nconst Util = require(\"./util\");\n\nclass PlayerCell extends MovingObject {\n  constructor(options) {\n    options.radius = PlayerCell.START_RADIUS;\n    options.vel = options.vel || [0, 0];\n    options.pos = options.game.centerPosition();\n    options.color = PlayerCell.CELL_COLOR;\n    super(options);\n  }\n\n  accelerate(magnitudes) {\n    this.vel[0] += magnitudes[0];\n    this.vel[1] += magnitudes[1];\n  }\n}\n\n\nPlayerCell.CELL_COLOR = \"#111111\";\nPlayerCell.START_RADIUS = 8;\nmodule.exports = PlayerCell;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/player_cell.js\n ** module id = 2\n ** module chunks = 0\n **/"," const Util = require(\"./util\");\n\nclass MovingObject {\n  constructor(options) {\n    this.pos = options.pos;\n    this.vel = options.vel;\n    this.radius = options.radius;\n    this.color = options.color;\n    this.game = options.game;\n  }\n\n  collideWith(otherObject) {\n    if (this.radius === 0 || otherObject.radius === 0) {\n      return;\n    }\n    let thisLoss = this.potentialLoss();\n    let otherLoss = otherObject.potentialLoss();\n    let thisIncrease = this.potentialRadiusGain(otherLoss.area);\n    let otherIncrease = otherObject.potentialRadiusGain(thisLoss.area);\n\n    if (this.radius === otherObject.radius) {\n      return;\n    } else if (this.radius > otherObject.radius) {\n      this.color = this.adjustColor(thisIncrease, otherObject.color);\n      this.radius += thisIncrease;\n      otherObject.radius -= otherLoss.radius;\n      if (otherObject.radius === 0) otherObject.remove();\n    } else {\n      this.radius -= thisLoss.radius;\n      otherObject.color = otherObject.adjustColor(otherIncrease, this.color);\n      otherObject.radius += otherIncrease;\n      if (this.radius === 0) this.remove();\n    }\n  }\n\n  potentialLoss() {\n    let losses = {};\n    if (this.radius >= 1) {\n      losses.radius = 1;\n    } else {\n      losses.radius = this.radius;\n    }\n    losses.area = Math.PI * (2*this.radius - 1);\n    return losses;\n  }\n\n  potentialRadiusGain(areaGained) {\n    let currentArea = Math.PI * Math.pow(this.radius, 2);\n    return Math.pow(((currentArea + areaGained)/Math.PI), 0.5) - this.radius;\n  }\n\n  adjustColor(weight, color) {\n    if (weight < 0) return this.color;\n    let foreignColorObj = this.hexToRgb(color);\n    let currentColorObj = this.hexToRgb(this.color);\n    let currentWeight = Math.PI * Math.pow(this.radius, 2);\n\n    let newRed = Math.floor((currentWeight*currentColorObj.r + weight*foreignColorObj.r)/\n                 (currentWeight + weight));\n    let newGreen = Math.floor((currentWeight*currentColorObj.g + weight*foreignColorObj.g)/\n                   (currentWeight + weight));\n    let newBlue = Math.floor((currentWeight*currentColorObj.b + weight*foreignColorObj.b)/\n                  (currentWeight + weight));\n\n    return rgbToHex(newRed, newGreen, newBlue);\n  }\n\n  outOfRange(color) {\n    if (color < 0 || color > 255) return true;\n    return false;\n  }\n\n  hexToRgb(hex) {\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function(m, r, g, b) {\n        return r + r + g + g + b + b;\n    });\n\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = this.color;\n\n    // starts a new path\n    ctx.beginPath();\n    // ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n    ctx.arc(\n      this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true\n    );\n    ctx.fill();\n  }\n\n  isCollidedWith(otherObject) {\n    const centerDist = Util.dist(this.pos, otherObject.pos);\n    return centerDist < (this.radius + otherObject.radius);\n  }\n\n  move(timeDelta) {\n    //timeDelta is number of milliseconds since last move\n    //if the computer is busy the time delta will be larger\n    //in this case the MovingObject should move farther in this frame\n    //the velocity of object is how far it should move in 1/60th of a second\n    const velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA;\n    const offsetX = this.vel[0] * velocityScale;\n    const offsetY = this.vel[1] * velocityScale;\n\n    this.pos = [this.pos[0] + offsetX, this.pos[1] + offsetY];\n    this.vel = this.game.redirectIfOutOfBounds(this.pos, this.vel, this.radius);\n\n  }\n\n  remove() {\n    this.game.removeObject(this);\n  }\n}\n\nconst NORMAL_FRAME_TIME_DELTA = 1000/60;\nconst componentToHex = (c) => {\n    var hex = c.toString(16);\n    return hex.length === 1 ? \"0\" + hex : hex;\n};\n\nconst rgbToHex = (r, g, b) => {\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n};\n\nmodule.exports = MovingObject;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/moving_object.js\n ** module id = 3\n ** module chunks = 0\n **/","const Util = {\n  dist(pos1, pos2) {\n    return Math.sqrt(\n      Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2)\n    );\n  }\n};\n\nmodule.exports = Util;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/util.js\n ** module id = 4\n ** module chunks = 0\n **/","const MovingObject = require(\"./moving_object\");\nconst Util = require(\"./util\");\n\nclass Cell extends MovingObject {\n  constructor(options) {\n    options.radius = Cell.randomRadius();\n    options.vel = options.vel || Cell.randomVelocity();\n    // options.vel = options.vel || [0, 0];\n    options.pos = options.game.randomPosition(options.radius);\n    options.color = Cell.randomColor();\n    super(options);\n  }\n\n\n}\n\nCell.randomRadius = () => {\n  let prob = Math.floor((Math.random() * 200) + 1);\n  if (Cell.RADIUS_DISTRIBUTION[prob]) {\n    return Cell.RADIUS_DISTRIBUTION[prob];\n  } else {\n    let radius;\n\n    for (let i = 0; i < Cell.PERCENTAGE_KEYS.length; i++) {\n      if (prob < Cell.PERCENTAGE_KEYS[i]) {\n        radius = Cell.RADIUS_DISTRIBUTION[Cell.PERCENTAGE_KEYS[i]];\n        break;\n      }\n    }\n    return radius;\n  }\n};\n\nCell.randomVelocity = () => {\n  const modifiers = [1, -1];\n\n  return [\n    modifiers[Math.floor(Math.random()*2)] * Math.random()/3,\n    modifiers[Math.floor(Math.random()*2)] * Math.random()/3\n  ];\n};\n\nCell.randomColor = () => {\n  let randomIdx = Math.floor((Math.random() * Cell.COLORS.length));\n  return Cell.COLORS[randomIdx];\n};\n\nCell.RADIUS_DISTRIBUTION = {\n  115: 1,\n  135: 2,\n  155: 3,\n  170: 4,\n  180: 5,\n  193: 6,\n  194: 10,\n  195: 12,\n  196: 15,\n  197: 20,\n  198: 30,\n  199: 40,\n  200: 50\n};\n\nCell.PERCENTAGE_KEYS = Object.keys(Cell.RADIUS_DISTRIBUTION).map(el => parseInt(el));\nCell.COLORS = [\n               \"#9b59b6\", \"#c0392b\", \"#d35400\", \"#f1c40f\", \"#e67e22\", \"#2980b9\",\n               \"#ecf0f1\", \"#3498db\", \"#1abc9c\", \"#2ecc71\", \"#ec1559\", \"#faf93C\"\n              ];\nCell.CELL_COLOR = \"#FFF\";\nmodule.exports = Cell;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/cell.js\n ** module id = 5\n ** module chunks = 0\n **/","class GameView {\n  constructor(game, ctx) {\n    this.ctx = ctx;\n    this.game = game;\n    this.resetGame();\n  }\n\n  resetGame() {\n    this.game.cells = [];\n    this.game.playerCells = [];\n    this.playerCell = this.game.addPlayerCell();\n    this.game.addCells();\n    this.game.totalMass = this.game.checkSystemMass();\n  }\n\n  bindKeyHandlers() {\n    const playerCell = this.playerCell;\n\n    Object.keys(GameView.MOVES).forEach(k => {\n      let move = GameView.MOVES[k];\n\n      // global key provided by keymaster.js, takes a key and a function\n      key(k, () => { playerCell.accelerate(move); });\n    });\n  }\n\n  start() {\n    this.bindKeyHandlers();\n    this.lastTime = 0;\n    this.game.inProgress = true;\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  animate(time) {\n    let timeStep = time - this.lastTime;\n    if (timeStep > 20) timeStep = 20;\n    this.game.step(timeStep);\n    this.game.draw(this.ctx);\n    this.lastTime = time;\n\n    requestAnimationFrame(this.animate.bind(this));\n  }\n}\n\nGameView.MOVES = {\n  \"w\": [ 0, -0.2 ],\n  \"a\": [ -0.2, 0 ],\n  \"s\": [ 0, 0.2 ],\n  \"d\": [ 0.2, 0 ],\n  \"up\": [ 0, -0.2 ],\n  \"left\": [ -0.2, 0 ],\n  \"down\": [ 0, 0.2 ],\n  \"right\": [ 0.2, 0 ]\n};\n\nmodule.exports = GameView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game_view.js\n ** module id = 6\n ** module chunks = 0\n **/"],"sourceRoot":""}